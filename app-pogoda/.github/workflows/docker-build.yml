name: Build and Push Docker Image

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  CACHE_IMAGE: yourdockerhubuser/app-cache

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to DockerHub for cache
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
        tags: |
          type=sha,format=short
          type=raw,value=latest

    - name: Build and push Docker image (multi-arch with cache)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: false
        cache-from: type=registry,ref=${{ env.CACHE_IMAGE }}
        cache-to: type=registry,mode=max,ref=${{ env.CACHE_IMAGE }}
        tags: ${{ steps.meta.outputs.tags }}
        outputs: type=docker,dest=/tmp/image.tar
        provenance: false  # required for Trivy scanning of local image

    - name: Load image for scanning
      run: docker load -i /tmp/image.tar

    - name: Run Trivy vulnerability scan
      uses: aquasecurity/trivy-action@v0.14.0
      with:
        image-ref: ${{ fromJson(steps.meta.outputs.json).tags[0] }}
        exit-code: 1
        severity: CRITICAL,HIGH
        format: table

    - name: Push image to GHCR (only if scan passes)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        cache-from: type=registry,ref=${{ env.CACHE_IMAGE }}
        cache-to: type=registry,mode=max,ref=${{ env.CACHE_IMAGE }}
        tags: ${{ steps.meta.outputs.tags }}

